我们可以编写些程序、编译、运行。

优点：友好的语法、面向对象、内存管理、跨平台可移植。/write-once,run-anywhere

Java的工作方式：编写源代码-编译器检查错误并翻译成字节码-java虚拟机读取并执行字节码，转换成平台可以理解的形式

类存于源文件里面，方法存于类中，语句存于方法中。

类是对象的蓝图，java中的绝大多数都是对象。

错误语法：

    int x = 1;
    while(x){}

java中的整型与boolean两种类型并不相容，只能用如下的boolean变量来测试：
    
    boolean isHot= true;
    while(isHot){}

类不是对象，是对象的蓝图。是用来创建对象的模型。会告诉虚拟机如何创建某种类型的对象。
对象是靠类的模型塑造出来的。

main的两种用途：测试真正的类；启动你的java应用程序。

java的程序在执行期是一组会互相交谈的对象。

java程序是由一组类组成，其中一个类会带有启动用的main方法。

对象引用变量保存的是存取对象的方法。

Dog d = new Dog() #代表取得Dog对象的方法以字节形式放进变量中。对象本身并没有放进变量中。

任意一个java虚拟机，所有的引用大小都一样。但不同的虚拟机可能会以不同的方式来表示引用，因此某个java虚拟机的引用可能会大于或小于另外一个虚拟机的引用。

java不是c。不可以对引用变量进行运算。

类所描述的是对象知道什么与执行什么。在编写类时，你是在描述java虚拟机应该如何制作该类型的对象。

封装会对实例变量加上绝对领域。

封装：强迫其他程序一定得经过setter，如此setter就能检查参数并判断是否可以执行。

实例变量与局部变量的区别：

实例变量声明在类内，局部变量声明在方法中，局部变量在使用前必须被初始化。

实例变量永远都会有默认值。int类型的变量默认值为0,float类型为0.0，booleans为false，对象引用默认值为null;

局部变量没有默认值，如果在变量被初始前就要使用的话，编译器会显示错误。

变量的比较：

使用"=="来比较两个主数据类型，或者判断两个引用是否引用同一个对象。

使用equals()来判断两个对象是否在意义上相等。（比如两个string对象是否带有相同的字节组合）。

"=="只用来比对两个变量的字节组合，实质所表示的意义则不重要。字节组合要么相等，要么就是不相等。如：
    
    int a = 3; 
    byte b =3;
    if(a == b){}  //由于字节组合相等，此处为true

实例变量应该要标记为private，并通过getter与setter来存取。如此才能有机会确保实例变量值会落在合法的范围内。

同for循环相比，while循环只有boolean测试，没有内建的初始化和重复表达式。

while适合用在不知道要循环几次的循环上，若知道执行几次，则使用for循环比较容易阅读。

    int i = 0;  //初始化
    while(i<8){
        System.out.println(i); 
        i++;   //计数器递增
    }

加强版的for循环

    for(String name:nameArray){}

将String转换成int
    
    Integer.parseInt(string)

"System.out.println(++y);"此处标准输出内部对y进行的运算也会对当前所在语句块当中的y产生影响，效果等同于"++y;"

数组无法改变大小。对象有状态和行为，无法对数组调用方法，比如不能从数组中删除元素，

ArrayList是个高级类，是个对象，可以确实地把引用删除掉，也可以动态的改变大小。在运用基本数据类型的时候，数组会比ArrayList快。

在使用ArrayList时，你只是在运用ArrayList类型的对象，因此跟运用其他对象一样，你会使用"."运算符调用它的方法。

使用数组时，你会用特殊的数组语法来操作，这样的语法只能用在数组上。虽然数组也是对象，但是它有自己的规则，你无法调用它的方法，最多只能存它的Length实例变量。
